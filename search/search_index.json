{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>Welcome to The Internals of Kafka Streams online book! \ud83e\udd19</p> <p>I'm Jacek Laskowski, an IT freelancer specializing in Apache Spark, Delta Lake and Apache Kafka (with brief forays into a wider data engineering space, e.g. Trino and ksqlDB, mostly during Warsaw Data Engineering meetups).</p> <p>I'm very excited to have you here and hope you will enjoy exploring the internals of Kafka Streams as much as I have.</p>  <p>Flannery O'Connor</p> <p>I write to discover what I know.</p>  \"The Internals Of\" series<p>I'm also writing other online books in the \"The Internals Of\" series. Please visit \"The Internals Of\" Online Books home page.</p>  <p>Expect text and code snippets from a variety of public sources. Attribution follows.</p> <p>Now, let's take a deep dive into Kafka Streams \ud83d\udd25</p>  <p>Last update: 2021-10-05</p>","title":"The Internals of Kafka Streams 3.0.0"},{"location":"KafkaClientSupplier/","text":"<p><code>KafkaClientSupplier</code> is...FIXME</p>","title":"KafkaClientSupplier"},{"location":"KafkaStreams/","text":"<p><code>KafkaStreams</code> is the execution environment of a Kafka Streams application.</p> <p><code>KafkaStreams</code> is a Kafka client for continuous stream processing (on input coming from one or more input topics and sending output to zero, one, or more output topics).</p>","title":"KafkaStreams"},{"location":"KafkaStreams/#creating-instance","text":"<p><code>KafkaStreams</code> takes the following to be created:</p> <ul> <li> InternalTopologyBuilder (or Topology) <li> StreamsConfig <li> KafkaClientSupplier (default: <code>DefaultKafkaClientSupplier</code>) <li> <code>Time</code>  <p>When created, <code>KafkaStreams</code> requests the given InternalTopologyBuilder to rewriteTopology followed by building a task and global task topologies.</p> <p><code>KafkaStreams</code> then...FIXME</p>","title":"Creating Instance"},{"location":"KafkaStreams/#defaultstreamsuncaughtexceptionhandler","text":"","title":"defaultStreamsUncaughtExceptionHandler <pre><code>void defaultStreamsUncaughtExceptionHandler(\n  Throwable throwable)\n</code></pre> <p><code>defaultStreamsUncaughtExceptionHandler</code>...FIXME</p>"},{"location":"KafkaStreams/#task-topology","text":"","title":"Task Topology <p><code>KafkaStreams</code> requests the InternalTopologyBuilder to build a task topology when created.</p> <p>The ProcessorTopology can have persistent local stores.</p>"},{"location":"KafkaStreams/#global-task-topology","text":"","title":"Global Task Topology <p>When created <code>KafkaStreams</code> requests the InternalTopologyBuilder to build a global task topology.</p>"},{"location":"KafkaStreams/#streamthreads","text":"","title":"StreamThreads <p><code>KafkaStreams</code> manages StreamThreads in a <code>threads</code> internal registry.</p> <p>The <code>threads</code> collection starts empty when <code>KafkaStreams</code> is created.</p> <p><code>KafkaStreams</code> adds a new <code>StreamThread</code> when requested to createAndAddStreamThread.</p> <p>A <code>StreamThread</code> is removed when <code>KafkaStreams</code> is requested for the following:</p> <ul> <li>defaultStreamsUncaughtExceptionHandler</li> <li>addStreamThread</li> <li>removeStreamThread</li> <li>getNumLiveStreamThreads</li> <li>getNextThreadIndex</li> </ul> <p><code>KafkaStreams</code> uses processStreamThread to work with the <code>StreamThread</code>s.</p>"},{"location":"KafkaStreams/#processstreamthread","text":"","title":"processStreamThread <pre><code>void processStreamThread(\n  java.util.function.Consumer&lt;StreamThread&gt; consumer)\n</code></pre> <p><code>processStreamThread</code>...FIXME</p>"},{"location":"KafkaStreams/#getnumlivestreamthreads","text":"","title":"getNumLiveStreamThreads <pre><code>int getNumLiveStreamThreads()\n</code></pre> <p><code>getNumLiveStreamThreads</code>...FIXME</p>"},{"location":"KafkaStreams/#globalstreamthread","text":"","title":"GlobalStreamThread <p><code>KafkaStreams</code> can use a GlobalStreamThread if...FIXME</p>"},{"location":"KafkaStreams/#starting-streams-client","text":"","title":"Starting Streams Client <pre><code>void start()\n</code></pre> <p><code>start</code> attempts to enter <code>REBALANCING</code> state and, if successful, prints out the following INFO message to the logs:</p> <pre><code>State transition from [oldState] to REBALANCING\n</code></pre> <p><code>start</code> prints out the following DEBUG message to the logs:</p> <pre><code>Starting Streams client\n</code></pre> <p><code>start</code> requests the GlobalStreamThread to start (if defined).</p> <p><code>start</code> requests all the StreamThreads to start.</p> <p><code>start</code>...FIXME</p>"},{"location":"KafkaStreams/#setuncaughtexceptionhandler","text":"","title":"setUncaughtExceptionHandler <pre><code>void setUncaughtExceptionHandler(\n  StreamsUncaughtExceptionHandler streamsUncaughtExceptionHandler)\n</code></pre> <p><code>setUncaughtExceptionHandler</code>...FIXME</p> <p><code>setUncaughtExceptionHandler</code>\u00a0is part of the public API.</p>"},{"location":"KafkaStreams/#handlestreamsuncaughtexception","text":"","title":"handleStreamsUncaughtException <pre><code>void handleStreamsUncaughtException(\n  Throwable throwable,\n  StreamsUncaughtExceptionHandler streamsUncaughtExceptionHandler)\n</code></pre> <p><code>handleStreamsUncaughtException</code>...FIXME</p> <p><code>handleStreamsUncaughtException</code>\u00a0is used when:</p> <ul> <li><code>KafkaStreams</code> is requested to setUncaughtExceptionHandler and defaultStreamsUncaughtExceptionHandler</li> </ul>"},{"location":"KafkaStreams/#replacestreamthread","text":"","title":"replaceStreamThread <pre><code>void replaceStreamThread(\n  Throwable throwable)\n</code></pre> <p><code>replaceStreamThread</code>...FIXME</p>"},{"location":"KafkaStreams/#addstreamthread","text":"","title":"addStreamThread <pre><code>Optional&lt;String&gt; addStreamThread()\n</code></pre> <p><code>addStreamThread</code>...FIXME</p> <p><code>addStreamThread</code> is part of the public API.</p>"},{"location":"KafkaStreams/#createandaddstreamthread","text":"","title":"createAndAddStreamThread <pre><code>StreamThread createAndAddStreamThread(\n  long cacheSizePerThread,\n  int threadIdx)\n</code></pre> <p><code>createAndAddStreamThread</code> creates a StreamThread and requests it to setStateListener with the StreamStateListener.</p> <p><code>createAndAddStreamThread</code> registers the <code>StreamThread</code> (in the threads and threadState internal registries).</p> <p><code>createAndAddStreamThread</code> requests the QueryableStoreProvider to addStoreProviderForThread (with the name of the <code>StreamThread</code> and a new <code>StreamThreadStateStoreProvider</code>).</p> <p><code>createAndAddStreamThread</code>\u00a0is used when:</p> <ul> <li><code>KafkaStreams</code> is created and requested to addStreamThread</li> </ul>"},{"location":"KafkaStreams/#logging","text":"","title":"Logging <p>Enable <code>ALL</code> logging level for <code>org.apache.kafka.streams.KafkaStreams</code> logger to see what happens inside.</p> <p>Add the following line to <code>log4j.properties</code>:</p> <pre><code>log4j.logger.org.apache.kafka.streams.KafkaStreams=ALL\n</code></pre> <p>Refer to Logging.</p>"},{"location":"StreamsBuilder/","text":"<p><code>StreamsBuilder</code> is...FIXME</p>","title":"StreamsBuilder"},{"location":"StreamsConfig/","text":"","title":"StreamsConfig"},{"location":"StreamsConfig/#applicationid","text":"","title":"application.id"},{"location":"StreamsConfig/#cachemaxbytesbuffering","text":"","title":"cache.max.bytes.buffering"},{"location":"StreamsConfig/#pollms","text":"","title":"poll.ms <p>Time (in millis) to block waiting for input</p> <p>Default: <code>100L</code></p> <p>Used when:</p> <ul> <li><code>GlobalStateManagerImpl</code> is created</li> <li><code>GlobalStreamThread</code> is requested to initialize</li> <li><code>StoreChangelogReader</code> is created</li> <li><code>StreamThread</code> is created</li> </ul>"},{"location":"StreamsConfig/#tasktimeoutms","text":"","title":"task.timeout.ms"},{"location":"StreamsPartitionAssignor/","text":"<p><code>StreamsPartitionAssignor</code> is...FIXME</p>","title":"StreamsPartitionAssignor"},{"location":"Topology/","text":"<p><code>Topology</code> is a logical representation of a ProcessorTopology.</p> <p><code>Topology</code> is a facade to InternalTopologyBuilder (with all methods delegating to it).</p>","title":"Topology"},{"location":"Topology/#creating-instance","text":"<p><code>Topology</code> takes no arguments to be created.</p> <p><code>Topology</code> is a part of the public API of Kafka Streams and can be created directly or indirectly for StreamsBuilder.</p>","title":"Creating Instance"},{"location":"Topology/#internaltopologybuilder","text":"","title":"InternalTopologyBuilder <p><code>Topology</code> creates an InternalTopologyBuilder when created.</p>"},{"location":"Topology/#addglobalstore","text":"","title":"addGlobalStore <pre><code>&lt;KIn, VIn&gt; Topology addGlobalStore(\n  StoreBuilder&lt;?&gt; storeBuilder,\n  String sourceName,\n  Deserializer&lt;KIn&gt; keyDeserializer,\n  Deserializer&lt;VIn&gt; valueDeserializer,\n  String topic,\n  String processorName,\n  ProcessorSupplier&lt;KIn, VIn, Void, Void&gt; stateUpdateSupplier) // (1)\n&lt;KIn, VIn&gt; Topology addGlobalStore(\n  StoreBuilder&lt;?&gt; storeBuilder,\n  String sourceName,\n  TimestampExtractor timestampExtractor,\n  Deserializer&lt;KIn&gt; keyDeserializer,\n  Deserializer&lt;VIn&gt; valueDeserializer,\n  String topic,\n  String processorName,\n  ProcessorSupplier&lt;KIn, VIn, Void, Void&gt; stateUpdateSupplier)\n</code></pre> <ol> <li>Uses no TimestampExtractor</li> </ol> <p><code>addGlobalStore</code> requests the InternalTopologyBuilder to add a global store.</p>"},{"location":"Topology/#demo","text":"","title":"Demo <pre><code>import org.apache.kafka.streams.Topology\nval topology = new Topology\n</code></pre>"},{"location":"TopologyTestDriver/","text":"<p><code>TopologyTestDriver</code> is...FIXME</p>","title":"TopologyTestDriver"},{"location":"logging/","text":"","title":"Logging"},{"location":"logging/#log4jproperties","text":"","title":"log4j.properties <p>Use the following <code>log4j.properties</code> in <code>src/main/resources</code> in your Kafka Streams application's project.</p> <pre><code>log4j.rootLogger=INFO, stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.target=System.out\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.logger.org.apache.kafka.streams.processor.internals.StreamThread=ALL\n</code></pre>"},{"location":"logging/#slf4j","text":"","title":"SLF4J <p>Kafka Streams uses Simple Logging Facade for Java (SLF4J) for logging.</p> <p>Use <code>slf4j-api</code> and <code>slf4j-log4j12</code> library dependencies in a Kafka Streams application (in <code>build.sbt</code>) for logging.</p> <pre><code>val slf4jVersion = \"2.0.0-alpha5\"\nlibraryDependencies += \"org.slf4j\" % \"slf4j-api\" % slf4jVersion\nlibraryDependencies += \"org.slf4j\" % \"slf4j-log4j12\" % slf4jVersion\n</code></pre>"},{"location":"overview/","text":"<p>Kafka Streams is a library for developing applications for processing records from topics in Apache Kafka.</p>","title":"Kafka Streams\u2009\u2014\u2009Stream Processing Library on Apache Kafka"},{"location":"demo/developing-kafka-streams-application/","text":"","title":"Demo: Developing Kafka Streams Application"},{"location":"demo/developing-kafka-streams-application/#build-topology-using-streamsbuilder","text":"","title":"Build Topology using StreamsBuilder <p>A Kafka Streams application requires a Topology that can be created directly or described (and built) indirectly using StreamsBuilder.</p> <pre><code>import org.apache.kafka.streams.scala.StreamsBuilder\nval streamBuilder = new StreamsBuilder\n</code></pre> <pre><code>import org.apache.kafka.streams.scala.ImplicitConversions._\nimport org.apache.kafka.streams.scala.serialization.Serdes._\n</code></pre> <pre><code>val records = streamBuilder.stream[String, String](topic = \"streams-demo-input\")\nrecords.to(topic = \"streams-demo-output\")\n</code></pre> <pre><code>import org.apache.kafka.streams.Topology\nval topology = streamBuilder.build()\n</code></pre> <p>A topology can be described.</p> <pre><code>println(topology.describe)\n</code></pre> <pre><code>Topologies:\n   Sub-topology: 0\n    Source: KSTREAM-SOURCE-0000000000 (topics: [streams-demo-input])\n      --&gt; KSTREAM-SINK-0000000001\n    Sink: KSTREAM-SINK-0000000001 (topic: streams-demo-output)\n      &lt;-- KSTREAM-SOURCE-0000000000\n</code></pre>"},{"location":"demo/developing-kafka-streams-application/#create-kafka-topics","text":"","title":"Create Kafka Topics <p>Kafka Streams requires that all input topics are available before it can be started (or <code>MissingSourceTopicException</code> is thrown).</p> <pre><code>./bin/kafka-topics.sh \\\n  --bootstrap-server :9092 \\\n  --create \\\n  --topic streams-demo-input \\\n  --partitions 1 \\\n  --replication-factor 1\n</code></pre> <pre><code>./bin/kafka-topics.sh \\\n  --bootstrap-server :9092 \\\n  --create \\\n  --topic streams-demo-output \\\n  --partitions 1 \\\n  --replication-factor 1\n</code></pre>"},{"location":"demo/developing-kafka-streams-application/#streamsconfig","text":"","title":"StreamsConfig <p>An execution environment of a Kafka Streams application is configured using StreamsConfig.</p> <pre><code>import org.apache.kafka.streams.StreamsConfig\nimport scala.jdk.CollectionConverters._\n// Only required configuration properties\n// And one more for demo purposes to slow processing to 15 secs\n// import java.util.concurrent.TimeUnit\nimport scala.concurrent.duration._\nval props = Map(\n  StreamsConfig.APPLICATION_ID_CONFIG -&gt; \"kafka-streams-demo\",\n  StreamsConfig.BOOTSTRAP_SERVERS_CONFIG -&gt; \":9092\",\n  StreamsConfig.POLL_MS_CONFIG -&gt; 15.seconds.toMillis).asJava\nval config = new StreamsConfig(props)\n</code></pre>"},{"location":"demo/developing-kafka-streams-application/#kafkastreams","text":"","title":"KafkaStreams <p>The execution environment of a Kafka Stream application is KafkaStreams.</p> <pre><code>import org.apache.kafka.streams.KafkaStreams\nval streams = new KafkaStreams(topology, config)\n</code></pre> <p>Eventually, <code>KafkaStreams</code> should be started for the stream processing to be executed.</p> <pre><code>streams.start\n</code></pre>"},{"location":"demo/developing-kafka-streams-application/#kcat","text":"","title":"kcat <pre><code>kcat -P -b localhost -t streams-demo-input\n</code></pre> <pre><code>kcat -C -b localhost -t streams-demo-output\n</code></pre>"},{"location":"processor/AbstractTask/","text":"<p><code>AbstractTask</code>\u00a0is a base abstraction of the Task abstraction for tasks.</p>","title":"AbstractTask"},{"location":"processor/AbstractTask/#implementations","text":"<ul> <li>StandbyTask</li> <li>StreamTask</li> </ul>","title":"Implementations"},{"location":"processor/AbstractTask/#creating-instance","text":"<p><code>AbstractTask</code> takes the following to be created:</p> <ul> <li> <code>TaskId</code> <li> ProcessorTopology <li> StateDirectory <li> ProcessorStateManager <li> Input <code>TopicPartition</code>s <li> task.timeout.ms configuration property <li> Task Type <li> <code>AbstractTask</code> Class  Abstract Class<p><code>AbstractTask</code>\u00a0is an abstract class and cannot be created directly. It is created indirectly for the concrete AbstractTasks.</p>","title":"Creating Instance"},{"location":"processor/ActiveTaskCreator/","text":"","title":"ActiveTaskCreator"},{"location":"processor/ActiveTaskCreator/#createtasks","text":"","title":"createTasks <pre><code>Collection&lt;Task&gt; createTasks(\n  Consumer&lt;byte[], byte[]&gt; consumer,\n  Map&lt;TaskId, Set&lt;TopicPartition&gt;&gt; tasksToBeCreated)\n</code></pre> <p><code>createTasks</code>...FIXME</p> <p><code>createTasks</code>\u00a0is used when:</p> <ul> <li><code>Tasks</code> is requested to createTasks</li> </ul>"},{"location":"processor/ActiveTaskCreator/#createactivetaskfromstandby","text":"","title":"createActiveTaskFromStandby <pre><code>StreamTask createActiveTaskFromStandby(\n  StandbyTask standbyTask,\n  Set&lt;TopicPartition&gt; inputPartitions,\n  Consumer&lt;byte[], byte[]&gt; consumer)\n</code></pre> <p><code>createActiveTaskFromStandby</code>...FIXME</p> <p><code>createActiveTaskFromStandby</code>\u00a0is used when:</p> <ul> <li><code>Tasks</code> is requested to convertStandbyToActive</li> </ul>"},{"location":"processor/ActiveTaskCreator/#createactivetask","text":"","title":"createActiveTask <pre><code>StreamTask createActiveTask(\n  TaskId taskId,\n  Set&lt;TopicPartition&gt; inputPartitions,\n  Consumer&lt;byte[], byte[]&gt; consumer,\n  LogContext logContext,\n  ProcessorTopology topology,\n  ProcessorStateManager stateManager,\n  InternalProcessorContext context)\n</code></pre> <p><code>createActiveTask</code>...FIXME</p> <p><code>createActiveTask</code>\u00a0is used when:</p> <ul> <li><code>ActiveTaskCreator</code> is requested to createTasks and createActiveTaskFromStandby</li> </ul>"},{"location":"processor/GlobalStateManagerImpl/","text":"<p><code>GlobalStateManagerImpl</code> is...FIXME</p>","title":"GlobalStateManagerImpl"},{"location":"processor/GlobalStreamThread/","text":"<p><code>GlobalStreamThread</code> is...FIXME</p>","title":"GlobalStreamThread"},{"location":"processor/InternalTopologyBuilder/","text":"","title":"InternalTopologyBuilder"},{"location":"processor/InternalTopologyBuilder/#global-topics","text":"","title":"Global Topics <pre><code>Set&lt;String&gt; globalTopics\n</code></pre> <p><code>InternalTopologyBuilder</code> tracks global topics (names) in a <code>globalTopics</code> internal registry.</p> <p>A new topic name is added in addGlobalStore.</p>"},{"location":"processor/InternalTopologyBuilder/#building-processor-topology","text":"","title":"Building Processor Topology <pre><code>ProcessorTopology build(\n  Set&lt;String&gt; nodeGroup)\n</code></pre> <p>For every NodeFactory (in the nodeFactories internal registry), if the name of the factory is in the given node group if defined or simply all node factories go through, <code>build</code> does the following:</p> <ol> <li>Requests the <code>NodeFactory</code> to build a ProcessorNode (and registers it in a local registry of processors by name)</li> <li>For <code>ProcessorNodeFactory</code>s, buildProcessorNode</li> <li>For <code>SourceNodeFactory</code>s, buildSourceNode</li> <li>For <code>SinkNodeFactory</code>s, buildSinkNode</li> </ol> <p>In the end, <code>build</code> creates a new ProcessorTopology.</p> <p><code>build</code>\u00a0is used when:</p> <ul> <li><code>InternalTopologyBuilder</code> is requested to build a topology, a subtopology and a global state topology</li> </ul>"},{"location":"processor/InternalTopologyBuilder/#buildprocessornode","text":"","title":"buildProcessorNode <pre><code>void buildProcessorNode(\n  Map&lt;String, ProcessorNode&lt;?, ?, ?, ?&gt;&gt; processorMap,\n  Map&lt;String, StateStore&gt; stateStoreMap,\n  ProcessorNodeFactory&lt;?, ?, ?, ?&gt; factory,\n  ProcessorNode&lt;Object, Object, Object, Object&gt; node)\n</code></pre> <p><code>buildProcessorNode</code>...FIXME</p>"},{"location":"processor/InternalTopologyBuilder/#building-source-node","text":"","title":"Building Source Node <pre><code>void buildSourceNode(\n  Map&lt;String, SourceNode&lt;?, ?&gt;&gt; topicSourceMap,\n  Set&lt;String&gt; repartitionTopics,\n  SourceNodeFactory&lt;?, ?&gt; sourceNodeFactory,\n  SourceNode&lt;?, ?&gt; node)\n</code></pre> <p><code>buildSourceNode</code> mutates (changes) the given <code>SourceNode</code> by topic name (<code>topicSourceMap</code>) and repartition topic names (<code>repartitionTopics</code>) collections.</p>  <p>When the pattern (of the given SourceNodeFactory) is defined, <code>buildSourceNode</code> subscriptionUpdates and requests the <code>SourceNodeFactory</code> to get the topics. Otherwise, <code>buildSourceNode</code> requests the <code>SourceNodeFactory</code> for the topics.</p> <p><code>buildSourceNode</code> adds the topic to the given <code>topicSourceMap</code> collection.</p> <p>For internal topics (in internalTopicNamesWithProperties registry), <code>buildSourceNode</code> decorates the name before adding to the given <code>topicSourceMap</code> collection and adds them to the given <code>repartitionTopics</code> collection.</p>"},{"location":"processor/InternalTopologyBuilder/#buildsinknode","text":"","title":"buildSinkNode <pre><code>void buildSinkNode(\n  Map&lt;String, ProcessorNode&lt;?, ?, ?, ?&gt;&gt; processorMap,\n  Map&lt;String, SinkNode&lt;?, ?&gt;&gt; topicSinkMap,\n  Set&lt;String&gt; repartitionTopics,\n  SinkNodeFactory&lt;?, ?&gt; sinkNodeFactory,\n  SinkNode&lt;?, ?&gt; node)\n</code></pre> <p><code>buildSinkNode</code>...FIXME</p>"},{"location":"processor/InternalTopologyBuilder/#building-local-processor-topology","text":"","title":"Building (Local) Processor Topology <pre><code>ProcessorTopology buildTopology()\n</code></pre> <p><code>buildTopology</code> initializes subscription and then builds a topology (of the node groups without the global node groups).</p> <p><code>buildTopology</code>\u00a0is used when:</p> <ul> <li><code>KafkaStreams</code> is created</li> <li><code>TopologyTestDriver</code> is requested to setupTopology</li> </ul>"},{"location":"processor/InternalTopologyBuilder/#building-processor-subtopology","text":"","title":"Building Processor SubTopology <pre><code>ProcessorTopology buildSubtopology(\n  int topicGroupId)\n</code></pre> <p><code>buildSubtopology</code> takes the <code>topicGroupId</code> node group (from the nodeGroups) and builds a topology.</p> <p><code>buildSubtopology</code>\u00a0is used when:</p> <ul> <li><code>ActiveTaskCreator</code> is requested to createTasks and createActiveTaskFromStandby</li> <li><code>StandbyTaskCreator</code> is requested to createTasks and createStandbyTaskFromActive</li> </ul>"},{"location":"processor/InternalTopologyBuilder/#building-global-state-processor-topology","text":"","title":"Building Global State Processor Topology <pre><code>ProcessorTopology buildGlobalStateTopology()\n</code></pre> <p><code>buildGlobalStateTopology</code> builds a topology of the global node groups if there are any.</p> <p><code>buildGlobalStateTopology</code> assumes that the applicationId has already been set or throws a <code>NullPointerException</code>:</p> <pre><code>topology has not completed optimization\n</code></pre> <p><code>buildGlobalStateTopology</code>\u00a0is used when:</p> <ul> <li><code>KafkaStreams</code> is created</li> <li><code>TopologyTestDriver</code> is requested to setupTopology</li> </ul>"},{"location":"processor/InternalTopologyBuilder/#rewriting-topology","text":"","title":"Rewriting Topology <pre><code>InternalTopologyBuilder rewriteTopology(\n  StreamsConfig config)\n</code></pre> <p><code>rewriteTopology</code> setApplicationId to the value of application.id configuration property.</p> <p>With cache.max.bytes.buffering enabled, <code>rewriteTopology</code>...FIXME</p> <p><code>rewriteTopology</code> requests the global StoreBuilders to build StateStores.</p> <p>In the end, <code>rewriteTopology</code> saves the StreamsConfig (and returns itself).</p> <p><code>rewriteTopology</code>\u00a0is used when:</p> <ul> <li><code>KafkaStreams</code> is created</li> <li><code>TopologyTestDriver</code> is requested to setupTopology</li> </ul>"},{"location":"processor/InternalTopologyBuilder/#globalnodegroups","text":"","title":"globalNodeGroups <pre><code>Set&lt;String&gt; globalNodeGroups()\n</code></pre> <p><code>globalNodeGroups</code> collects global source nodes from all the node groups.</p> <p><code>globalNodeGroups</code>\u00a0is used when:</p> <ul> <li><code>InternalTopologyBuilder</code> is requested to build a local (excluding global state nodes) and global state topologies</li> </ul>"},{"location":"processor/InternalTopologyBuilder/#isglobalsource","text":"","title":"isGlobalSource <pre><code>boolean isGlobalSource(\n  String nodeName)\n</code></pre> <p><code>isGlobalSource</code> finds a NodeFactory (by given <code>nodeName</code>) in nodeFactories registry.</p> <p><code>isGlobalSource</code> is positive (<code>true</code>) when the <code>NodeFactory</code> is a SourceNodeFactory with one topic only that is global. Otherwise, <code>isGlobalSource</code> is negative (<code>false</code>).</p> <p><code>isGlobalSource</code>\u00a0is used when:</p> <ul> <li><code>InternalTopologyBuilder</code> is requested to globalNodeGroups, describeGlobalStore and nodeGroupContainsGlobalSourceNode</li> </ul>"},{"location":"processor/InternalTopologyBuilder/#registering-global-store","text":"","title":"Registering Global Store <pre><code>&lt;KIn, VIn&gt; void addGlobalStore(\n  StoreBuilder&lt;?&gt; storeBuilder,\n  String sourceName,\n  TimestampExtractor timestampExtractor,\n  Deserializer&lt;KIn&gt; keyDeserializer,\n  Deserializer&lt;VIn&gt; valueDeserializer,\n  String topic,\n  String processorName,\n  ProcessorSupplier&lt;KIn, VIn, Void, Void&gt; stateUpdateSupplier)\n</code></pre> <p><code>addGlobalStore</code>...FIXME</p> <p><code>addGlobalStore</code> is used when:</p> <ul> <li><code>Topology</code> is requested to addGlobalStore</li> <li><code>GlobalStoreNode</code> is requested to <code>writeToTopology</code></li> <li><code>TableSourceNode</code> is requested to <code>writeToTopology</code></li> </ul>"},{"location":"processor/NodeFactory/","text":"<p><code>NodeFactory</code> is...FIXME</p>","title":"NodeFactory"},{"location":"processor/ProcessorStateManager/","text":"<p><code>ProcessorStateManager</code> is...FIXME</p>","title":"ProcessorStateManager"},{"location":"processor/ProcessorTopology/","text":"","title":"ProcessorTopology"},{"location":"processor/ProcessorTopology/#creating-instance","text":"<p><code>ProcessorTopology</code> takes the following to be created:</p> <ul> <li> <code>ProcessorNode</code>s <li> <code>SourceNode</code>s by topic <li> <code>SinkNode</code> by topic <li> <code>StateStore</code>s <li> Global <code>StateStore</code>s <li> Store names by topic <li> Repartition topics  <p><code>ProcessorTopology</code> is created\u00a0when:</p> <ul> <li><code>InternalTopologyBuilder</code> is requested to build a ProcessorTopology</li> </ul>","title":"Creating Instance"},{"location":"processor/SourceNodeFactory/","text":"<p><code>SourceNodeFactory</code> is...FIXME</p>","title":"SourceNodeFactory"},{"location":"processor/StandbyTask/","text":"<p><code>StandbyTask</code> is a Task (and AbstractTask).</p>","title":"StandbyTask"},{"location":"processor/StandbyTask/#creating-instance","text":"<p><code>StandbyTask</code> takes the following to be created:</p> <ul> <li> <code>TaskId</code> <li> Input <code>TopicPartition</code>s <li> ProcessorTopology <li> StreamsConfig <li> <code>StreamsMetricsImpl</code> <li> ProcessorStateManager <li> StateDirectory <li> <code>ThreadCache</code> <li> <code>InternalProcessorContext</code>  <p>When created, <code>StandbyTask</code> requests the InternalProcessorContext to <code>transitionToStandby</code> with the ThreadCache.</p> <p><code>StandbyTask</code> is created\u00a0when:</p> <ul> <li><code>StandbyTaskCreator</code> is requested to createStandbyTask</li> </ul>","title":"Creating Instance"},{"location":"processor/StandbyTask/#abstracttask","text":"","title":"AbstractTask <p><code>StandbyTask</code> is an AbstractTask.</p>"},{"location":"processor/StandbyTask/#task-type","text":"","title":"Task Type <p><code>StandbyTask</code> uses standby-task for task type.</p>"},{"location":"processor/StandbyTask/#class","text":"","title":"Class <p><code>StandbyTask</code> uses <code>StandbyTask.class</code> for clazz.</p>"},{"location":"processor/StandbyTaskCreator/","text":"","title":"StandbyTaskCreator"},{"location":"processor/StandbyTaskCreator/#creating-instance","text":"<p><code>StandbyTaskCreator</code> takes the following to be created:</p> <ul> <li> InternalTopologyBuilder <li> StreamsConfig <li> <code>StreamsMetricsImpl</code> <li> StateDirectory <li> <code>ChangelogReader</code> <li> Thread ID <li> <code>Logger</code>  <p>When created, <code>StandbyTaskCreator</code> initializes a task sensor and a ThreadCache.</p> <p><code>StandbyTaskCreator</code> is created\u00a0when:</p> <ul> <li><code>StreamThread</code> utility is used to create a StreamThread</li> </ul>","title":"Creating Instance"},{"location":"processor/StateDirectory/","text":"<p><code>StateDirectory</code> is...FIXME</p>","title":"StateDirectory"},{"location":"processor/StoreChangelogReader/","text":"<p><code>StoreChangelogReader</code> is...FIXME</p>","title":"StoreChangelogReader"},{"location":"processor/StreamTask/","text":"<p><code>StreamTask</code> is a concrete AbstractTask.</p>","title":"StreamTask"},{"location":"processor/StreamTask/#creating-instance","text":"<p><code>StreamTask</code> takes the following to be created:</p> <ul> <li> <code>TaskId</code> <li> Input <code>TopicPartition</code>s <li> <code>ProcessorTopology</code> <li> Main <code>Consumer&lt;byte[], byte[]&gt;</code> <li> StreamsConfig <li> <code>StreamsMetricsImpl</code> <li> <code>StateDirectory</code> <li> <code>ThreadCache</code> <li> <code>Time</code> <li> <code>ProcessorStateManager</code> <li> <code>RecordCollector</code> <li> <code>InternalProcessorContext</code> <li> <code>LogContext</code>  <p><code>StreamTask</code> is created\u00a0when:</p> <ul> <li><code>ActiveTaskCreator</code> is requested to createActiveTask</li> <li><code>TopologyTestDriver</code> is requested to <code>setupTask</code></li> </ul>","title":"Creating Instance"},{"location":"processor/StreamThread/","text":"<p><code>StreamThread</code> is a <code>Thread</code> (Java).</p>","title":"StreamThread"},{"location":"processor/StreamThread/#creating-instance","text":"<p><code>StreamThread</code> takes the following to be created:</p> <ul> <li> <code>Time</code> <li> StreamsConfig <li> <code>Admin</code> <li> Main <code>Consumer&lt;byte[], byte[]&gt;</code> <li> Restore <code>Consumer&lt;byte[], byte[]&gt;</code> <li> <code>ChangelogReader</code> <li> <code>originalReset</code> <li> TaskManager <li> <code>StreamsMetricsImpl</code> <li> <code>InternalTopologyBuilder</code> <li> Thread ID <li> <code>LogContext</code> <li> <code>assignmentErrorCode</code> <li> <code>nextProbingRebalanceMs</code> <li> Shutdown Error Hook <li> <code>java.util.function.Consumer&lt;Throwable&gt;</code> <li> <code>java.util.function.Consumer&lt;Long&gt;</code>  <p><code>StreamThread</code> is created\u00a0using create utility.</p>","title":"Creating Instance"},{"location":"processor/StreamThread/#creating-streamthread","text":"","title":"Creating StreamThread <pre><code>StreamThread create(\n  InternalTopologyBuilder builder,\n  StreamsConfig config,\n  KafkaClientSupplier clientSupplier,\n  Admin adminClient,\n  UUID processId,\n  String clientId,\n  StreamsMetricsImpl streamsMetrics,\n  Time time,\n  StreamsMetadataState streamsMetadataState,\n  long cacheSizeBytes,\n  StateDirectory stateDirectory,\n  StateRestoreListener userStateRestoreListener,\n  int threadIdx,\n  Runnable shutdownErrorHook,\n  java.util.function.Consumer&lt;Throwable&gt; streamsUncaughtExceptionHandler)\n</code></pre> <p><code>create</code> prints out the following INFO message to the logs:</p> <pre><code>Creating restore consumer client\n</code></pre> <p><code>create</code> requests the given <code>StreamsConfig</code> for the restore consumer configs (with getRestoreConsumerClientId) and requests the given KafkaClientSupplier for a restore consumer.</p> <p><code>create</code> creates a StoreChangelogReader.</p> <p><code>create</code> creates a ThreadCache.</p> <p><code>create</code> creates a ActiveTaskCreator, a StandbyTaskCreator and a TaskManager.</p> <p><code>create</code> prints out the following INFO message to the logs:</p> <pre><code>Creating consumer client\n</code></pre> <p><code>create</code>...FIXME</p> <p><code>create</code>\u00a0is used when:</p> <ul> <li><code>KafkaStreams</code> is requested to createAndAddStreamThread</li> </ul>"},{"location":"processor/StreamThread/#logging","text":"","title":"Logging <p>Enable <code>ALL</code> logging level for <code>org.apache.kafka.streams.processor.internals.StreamThread</code> logger to see what happens inside.</p> <p>Add the following line to <code>log4j.properties</code>:</p> <pre><code>log4j.logger.org.apache.kafka.streams.processor.internals.StreamThread=ALL\n</code></pre> <p>Refer to Logging.</p>"},{"location":"processor/Task/","text":"<p><code>Task</code> is an abstraction of tasks.</p>","title":"Task"},{"location":"processor/Task/#contract","text":"","title":"Contract"},{"location":"processor/Task/#addrecords","text":"","title":"addRecords <pre><code>void addRecords(\n  TopicPartition partition,\n  Iterable&lt;ConsumerRecord&lt;byte[], byte[]&gt;&gt; records)\n</code></pre> <p>Used when:</p> <ul> <li><code>TaskManager</code> is requested to addRecordsToTasks</li> <li><code>TopologyTestDriver</code> is requested to enqueueTaskRecord</li> </ul>"},{"location":"processor/Task/#changelogoffsets","text":"","title":"changelogOffsets <pre><code>Map&lt;TopicPartition, Long&gt; changelogOffsets()\n</code></pre>"},{"location":"processor/Task/#changelogpartitions","text":"","title":"changelogPartitions <pre><code>Collection&lt;TopicPartition&gt; changelogPartitions()\n</code></pre>"},{"location":"processor/Task/#cleartasktimeout","text":"","title":"clearTaskTimeout <pre><code>void clearTaskTimeout()\n</code></pre>"},{"location":"processor/Task/#closeclean","text":"","title":"closeClean <pre><code>void closeClean()\n</code></pre>"},{"location":"processor/Task/#closecleanandrecyclestate","text":"","title":"closeCleanAndRecycleState <pre><code>void closeCleanAndRecycleState()\n</code></pre>"},{"location":"processor/Task/#closedirty","text":"","title":"closeDirty <pre><code>void closeDirty()\n</code></pre>"},{"location":"processor/Task/#commitneeded","text":"","title":"commitNeeded <pre><code>boolean commitNeeded()\n</code></pre>"},{"location":"processor/Task/#committedoffsets","text":"","title":"committedOffsets <pre><code>Map&lt;TopicPartition, Long&gt; committedOffsets()\n</code></pre>"},{"location":"processor/Task/#completerestoration","text":"","title":"completeRestoration <pre><code>void completeRestoration(\n  java.util.function.Consumer&lt;Set&lt;TopicPartition&gt;&gt; offsetResetter)\n</code></pre>"},{"location":"processor/Task/#getstore","text":"","title":"getStore <pre><code>StateStore getStore(\n  String name)\n</code></pre> <p>Used when:</p> <ul> <li><code>StreamThreadStateStoreProvider</code> is requested for stores</li> </ul>"},{"location":"processor/Task/#highwatermark","text":"","title":"highWaterMark <pre><code>Map&lt;TopicPartition, Long&gt; highWaterMark()\n</code></pre>"},{"location":"processor/Task/#taskid","text":"","title":"TaskId <pre><code>TaskId id()\n</code></pre>"},{"location":"processor/Task/#initializeifneeded","text":"","title":"initializeIfNeeded <pre><code>void initializeIfNeeded()\n</code></pre>"},{"location":"processor/Task/#inputpartitions","text":"","title":"inputPartitions <pre><code>Set&lt;TopicPartition&gt; inputPartitions()\n</code></pre>"},{"location":"processor/Task/#isactive","text":"","title":"isActive <pre><code>boolean isActive()\n</code></pre>"},{"location":"processor/Task/#markchangelogascorrupted","text":"","title":"markChangelogAsCorrupted <pre><code>void markChangelogAsCorrupted(\n  Collection&lt;TopicPartition&gt; partitions)\n</code></pre>"},{"location":"processor/Task/#markchangelogascorrupted_1","text":"","title":"markChangelogAsCorrupted <pre><code>void maybeInitTaskTimeoutOrThrow(\n  long currentWallClockMs,\n  Exception cause)\n</code></pre>"},{"location":"processor/Task/#postcommit","text":"","title":"postCommit <pre><code>void postCommit(\n  boolean enforceCheckpoint)\n</code></pre>"},{"location":"processor/Task/#preparecommit","text":"","title":"prepareCommit <pre><code>Map&lt;TopicPartition, OffsetAndMetadata&gt; prepareCommit()\n</code></pre> <p>Used when:</p> <ul> <li><code>TaskManager</code> is requested to closeDirtyAndRevive, handleCloseAndRecycle, prepareCommitAndAddOffsetsToMap, closeTaskDirty, tryCloseCleanAllActiveTasks, tryCloseCleanAllStandbyTasks and commitAndFillInConsumedOffsetsAndMetadataPerTaskMap</li> <li><code>TopologyTestDriver</code> is requested to completeAllProcessableWork, advanceWallClockTime and close</li> </ul>"},{"location":"processor/Task/#resume","text":"","title":"resume <pre><code>void resume()\n</code></pre>"},{"location":"processor/Task/#revive","text":"","title":"revive <pre><code>void revive()\n</code></pre>"},{"location":"processor/Task/#state","text":"","title":"state <pre><code>State state()\n</code></pre>"},{"location":"processor/Task/#suspend","text":"","title":"suspend <pre><code>void suspend()\n</code></pre>"},{"location":"processor/Task/#timecurrentidlingstarted","text":"","title":"timeCurrentIdlingStarted <pre><code>Optional&lt;Long&gt; timeCurrentIdlingStarted()\n</code></pre>"},{"location":"processor/Task/#updateinputpartitions","text":"","title":"updateInputPartitions <pre><code>void updateInputPartitions(\n  Set&lt;TopicPartition&gt; topicPartitions,\n  Map&lt;String, List&lt;String&gt;&gt; allTopologyNodesToSourceTopics)\n</code></pre>"},{"location":"processor/Task/#implementations","text":"<ul> <li>AbstractTask</li> <li>StandbyTask</li> <li>StreamTask</li> </ul>","title":"Implementations"},{"location":"processor/TaskManager/","text":"","title":"TaskManager"},{"location":"processor/TaskManager/#creating-instance","text":"<p><code>TaskManager</code> takes the following to be created:</p> <ul> <li> <code>Time</code> <li> <code>ChangelogReader</code> <li> Process UUID <li> Log Prefix <li> <code>StreamsMetricsImpl</code> <li> ActiveTaskCreator <li> StandbyTaskCreator <li> <code>InternalTopologyBuilder</code> <li> <code>Admin</code> <li> <code>StateDirectory</code> <li> <code>StreamThread.ProcessingMode</code>  <p><code>TaskManager</code> is created\u00a0when:</p> <ul> <li><code>StreamThread</code> utility is used to create a StreamThread</li> </ul>","title":"Creating Instance"},{"location":"processor/TaskManager/#handleassignment","text":"","title":"handleAssignment <pre><code>void handleAssignment(\n  Map&lt;TaskId, Set&lt;TopicPartition&gt;&gt; activeTasks,\n  Map&lt;TaskId, Set&lt;TopicPartition&gt;&gt; standbyTasks)\n</code></pre> <p><code>handleAssignment</code>...FIXME</p> <p><code>handleAssignment</code>\u00a0is used when:</p> <ul> <li><code>StreamsPartitionAssignor</code> is requested to onAssignment</li> </ul>"},{"location":"processor/TaskManager/#handlecloseandrecycle","text":"","title":"handleCloseAndRecycle <pre><code>void handleCloseAndRecycle(\n  Set&lt;Task&gt; tasksToRecycle,\n  Set&lt;Task&gt; tasksToCloseClean,\n  Set&lt;Task&gt; tasksToCloseDirty,\n  Map&lt;TaskId, Set&lt;TopicPartition&gt;&gt; activeTasksToCreate,\n  Map&lt;TaskId, Set&lt;TopicPartition&gt;&gt; standbyTasksToCreate,\n  LinkedHashMap&lt;TaskId, RuntimeException&gt; taskCloseExceptions)\n</code></pre> <p><code>handleCloseAndRecycle</code>...FIXME</p>"},{"location":"processor/Tasks/","text":"","title":"Tasks"},{"location":"processor/Tasks/#createtasks","text":"","title":"createTasks <pre><code>void createTasks(\n  Map&lt;TaskId, Set&lt;TopicPartition&gt;&gt; activeTasksToCreate,\n  Map&lt;TaskId, Set&lt;TopicPartition&gt;&gt; standbyTasksToCreate)\n</code></pre> <p><code>createTasks</code>...FIXME</p> <p><code>createTasks</code>\u00a0is used when:</p> <ul> <li><code>TaskManager</code> is requested to handleAssignment</li> </ul>"},{"location":"processor/Tasks/#convertstandbytoactive","text":"","title":"convertStandbyToActive <pre><code>void convertStandbyToActive(\n  StandbyTask standbyTask,\n  Set&lt;TopicPartition&gt; partitions)\n</code></pre> <p><code>convertStandbyToActive</code>...FIXME</p> <p><code>convertStandbyToActive</code>\u00a0is used when:</p> <ul> <li><code>TaskManager</code> is requested to handleCloseAndRecycle</li> </ul>"},{"location":"processor/TimestampExtractor/","text":"<p><code>TimestampExtractor</code> is...FIXME</p>","title":"TimestampExtractor"},{"location":"state/QueryableStoreProvider/","text":"<p><code>QueryableStoreProvider</code> is...FIXME</p>","title":"QueryableStoreProvider"},{"location":"state/StoreBuilder/","text":"<p><code>StoreBuilder</code> is...FIXME</p>","title":"StoreBuilder"},{"location":"state/StreamThreadStateStoreProvider/","text":"<p><code>StreamThreadStateStoreProvider</code> is...FIXME</p>","title":"StreamThreadStateStoreProvider"},{"location":"state/ThreadCache/","text":"<p><code>ThreadCache</code> is...FIXME</p>","title":"ThreadCache"}]}